---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { render } from 'astro:content';
import '@fontsource/zen-kaku-gothic-new/400.css';
import '@fontsource/zen-kaku-gothic-new/500.css';
import '@fontsource/zen-kaku-gothic-new/700.css';

type Props = CollectionEntry<'blog'>;


const { title, description, pubDate, updatedDate, heroImage } = Astro.props.data ?? Astro.props;
const post = Astro.props as Props;

// Markdown本文をHTMLとして描画
const { Content } = await render(post);
---

<html lang="ja">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			:root {
				--content-width: 768px;
				--content-padding: 2rem;
				--border-radius: 16px;
				--transition: all 0.3s ease;
				--text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				--header-gradient: linear-gradient(135deg, rgba(var(--accent), 0.1) 0%, rgba(var(--accent-light), 0.05) 100%);
			}

			main {
				width: 100%;
				margin: 0;
				background: rgb(var(--gray-light));
				min-height: 100vh;
			}

			.article-container {
				max-width: var(--content-width);
				margin: 0 auto;
				background: white;
				box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
				border-radius: var(--border-radius);
				overflow: hidden;
				margin-top: 2rem;
				margin-bottom: 2rem;
			}

			.hero-section {
				position: relative;
				overflow: hidden;
			}

			.hero-image {
				width: 100%;
				height: 400px;
				overflow: hidden;
			}

			.hero-image img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				transition: var(--transition);
				filter: brightness(0.9);
			}

			.hero-image:hover img {
				transform: scale(1.05);
				filter: brightness(1);
			}

			.hero-overlay {
				position: absolute;
				bottom: 0;
				left: 0;
				right: 0;
				background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
				height: 50%;
				pointer-events: none;
			}

			.article-header {
				padding: var(--content-padding);
				background: var(--header-gradient);
				border-bottom: 1px solid rgba(var(--gray), 0.2);
			}

			.metadata {
				display: flex;
				align-items: center;
				gap: 1rem;
				margin-bottom: 1.5rem;
				flex-wrap: wrap;
			}

			.date-badge {
				background: rgba(var(--accent), 0.1);
				color: rgb(var(--accent));
				padding: 0.5rem 1rem;
				border-radius: 50px;
				font-size: 0.9rem;
				font-weight: 500;
				border: 1px solid rgba(var(--accent), 0.2);
			}

			.updated-badge {
				background: rgba(var(--gray), 0.1);
				color: rgb(var(--gray-dark));
				padding: 0.4rem 0.8rem;
				border-radius: 50px;
				font-size: 0.8rem;
				font-style: italic;
				border: 1px solid rgba(var(--gray), 0.2);
			}

			.article-title {
				margin: 0;
				font-size: clamp(2rem, 5vw, 3rem);
				font-weight: 700;
				line-height: 1.2;
				color: rgb(var(--gray-dark));
				text-shadow: var(--text-shadow);
				margin-bottom: 1rem;
			}

			.title-divider {
				height: 4px;
				background: linear-gradient(90deg, rgb(var(--accent)), rgba(var(--accent), 0.3));
				border: none;
				border-radius: 2px;
				margin: 0;
				width: 80px;
			}

			.prose {
				padding: var(--content-padding);
				color: rgb(var(--gray-dark));
				line-height: 1.8;
				font-size: 1.1rem;
			}

			/* 重要：Markdownコンテンツのスタイリング */
			.prose :global(h1) {
				font-size: 2.2rem;
				font-weight: 700;
				margin: 2.5rem 0 1.5rem 0;
				color: rgb(var(--gray-dark));
				border-bottom: 3px solid rgb(var(--accent));
				padding-bottom: 0.5rem;
			}

			.prose :global(h2) {
				font-size: 1.8rem;
				font-weight: 600;
				margin: 2.5rem 0 1rem 0;
				color: rgb(var(--gray-dark));
				border-left: 4px solid rgb(var(--accent));
				padding-left: 1rem;
			}

			.prose :global(h3) {
				font-size: 1.4rem;
				font-weight: 500;
				margin: 2rem 0 0.8rem 0;
				color: rgb(var(--gray-dark));
			}

			.prose :global(h4) {
				font-size: 1.2rem;
				font-weight: 500;
				margin: 1.8rem 0 0.6rem 0;
				color: rgb(var(--gray-dark));
			}

			.prose :global(p) {
				margin-bottom: 1.5rem;
				text-align: justify;
				line-height: 1.8;
			}

			.prose :global(strong) {
				font-weight: 600;
				color: rgb(var(--accent));
			}

			.prose :global(em) {
				font-style: italic;
				color: rgb(var(--gray-dark));
			}

			.prose :global(blockquote) {
				margin: 2rem 0;
				padding: 1.5rem;
				background: rgba(var(--accent), 0.05);
				border-left: 4px solid rgb(var(--accent));
				border-radius: 0 8px 8px 0;
				font-style: italic;
				position: relative;
			}

			.prose :global(blockquote p) {
				margin: 0;
			}

			.prose :global(blockquote::before) {
				content: '"';
				font-size: 4rem;
				color: rgba(var(--accent), 0.3);
				position: absolute;
				top: -0.5rem;
				left: 1rem;
				font-family: serif;
			}

			.prose :global(code) {
				background: rgba(var(--gray), 0.1);
				padding: 0.2rem 0.4rem;
				border-radius: 4px;
				font-size: 0.9rem;
				color: rgb(var(--accent));
				font-family: 'Courier New', monospace;
			}

			.prose :global(pre) {
				background: rgb(var(--gray-dark));
				color: white;
				padding: 1.5rem;
				border-radius: 8px;
				overflow-x: auto;
				margin: 1.5rem 0;
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			}

			.prose :global(pre code) {
				background: none;
				padding: 0;
				color: inherit;
			}

			.prose :global(ul), .prose :global(ol) {
				margin: 1.5rem 0;
				padding-left: 2rem;
			}

			.prose :global(li) {
				margin-bottom: 0.8rem;
				line-height: 1.7;
			}

			.prose :global(ul li) {
				list-style-type: disc;
			}

			.prose :global(ol li) {
				list-style-type: decimal;
			}

			.prose :global(a) {
				color: rgb(var(--accent));
				text-decoration: none;
				border-bottom: 2px solid transparent;
				transition: var(--transition);
			}

			.prose :global(a:hover) {
				border-bottom-color: rgb(var(--accent));
			}

			.prose :global(img) {
				max-width: 100%;
				height: auto;
				border-radius: 8px;
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
				margin: 2rem 0;
				display: block;
				margin-left: auto;
				margin-right: auto;
			}

			.prose :global(table) {
				width: 100%;
				border-collapse: collapse;
				margin: 2rem 0;
				box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
				border-radius: 8px;
				overflow: hidden;
			}

			.prose :global(th), .prose :global(td) {
				padding: 1rem;
				text-align: left;
				border-bottom: 1px solid rgba(var(--gray), 0.2);
			}

			.prose :global(th) {
				background: rgba(var(--accent), 0.1);
				font-weight: 600;
				color: rgb(var(--gray-dark));
			}

			.prose :global(tr:hover) {
				background: rgba(var(--gray), 0.05);
			}

			.prose :global(hr) {
				border: none;
				height: 2px;
				background: linear-gradient(90deg, transparent, rgba(var(--gray), 0.3), transparent);
				margin: 3rem 0;
			}

			/* レスポンシブデザイン */
			@media (max-width: 768px) {
				:root {
					--content-padding: 1.5rem;
				}

				.article-container {
					margin: 1rem;
					border-radius: 12px;
				}

				.hero-image {
					height: 200px;
				}

				.metadata {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.8rem;
				}

				.article-title {
					font-size: 2rem;
				}

				.prose {
					font-size: 1rem;
					line-height: 1.7;
				}

				.prose :global(h1) {
					font-size: 1.8rem;
				}

				.prose :global(h2) {
					font-size: 1.5rem;
				}

				.prose :global(h3) {
					font-size: 1.2rem;
				}
			}

			@media (max-width: 480px) {
				:root {
					--content-padding: 1rem;
				}

				.article-container {
					margin: 0.5rem;
				}

				.hero-image {
					height: 180px;
				}

				.article-title {
					font-size: 1.8rem;
				}
			}

			/* スクロールアニメーション */
			@keyframes fadeInUp {
				from {
					opacity: 0;
					transform: translateY(20px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			.article-header, .prose {
				animation: fadeInUp 0.6s ease-out;
			}

			.prose {
				animation-delay: 0.2s;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article class="article-container">
				<h1 class="article-title">{title}</h1>
				{heroImage && <img src={heroImage} alt={title} class="hero-image" />}
				<div class="metadata">
					<span><FormattedDate date={pubDate} /></span>
					{updatedDate && <span>（更新: <FormattedDate date={updatedDate} />）</span>}
				</div>
				<div class="prose">
					<Content />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>